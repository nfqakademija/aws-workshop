Description:
  AWS workshop

Resources:
  Ec2ConnectPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: WorkShopConnectToEc2
      Groups:
        - !Ref Colleagues
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:Describe*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:StartSession"
              - "ssm:DescribeInstanceInformation"
              - "ssm:GetConnectionStatus"
            Resource: "*" # Lower in the future
          - Effect: Allow
            Action:
              - "cloudtrail:*"
            Resource: "*" # Lower in the future
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !GetAtt CheckTaskLambda.Arn



  Colleagues:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: "AwsWorkshopParticipants"
      Path: "/aws-workshop/"

  Colleague1: #  by generate.php script
    Type: AWS::IAM::User
    Properties: 
      Groups:
        - !Ref Colleagues
      LoginProfile: 
        Password: "SOME-RADOM-PASSWORD" # To be overwritten  by generate.php script
      Path: "/aws-workshop/"
      UserName: "example@example.com" # To be overwritten by generate.php script

  Colleague1AccessKey:  
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref Colleague1

  CheckTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/aws-workshop/"
      ManagedPolicyArns:
       - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
       - PolicyName: "CheckTaskPolicy"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: "*" # Lower in the future

  CheckTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CheckTaskRole.Arn
      Runtime: nodejs12.x
      Timeout: 3
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            return {
              "given": event,
              "generated": "result",
              "context": context.clientContext
            };
          }

Outputs:
  LoginUrl:
    Description: Path to login to specific AWS account
    Value: !Sub "https://${AWS::AccountId}.signin.aws.amazon.com/console/" # E.g. https://327920853133.signin.aws.amazon.com/console/
  CheckTaskLambdaName:
    Description: "Lambda name to be used in student's UI"
    Value: !Ref CheckTaskLambda
  Colleague1AccessKeyId:
    Description: accessKeyId for SDK
    Value: !Ref Colleague1AccessKey
  Colleague1SecretKey:
    Description: secretAccessKey for SDK
    Value: !GetAtt Colleague1AccessKey.SecretAccessKey
