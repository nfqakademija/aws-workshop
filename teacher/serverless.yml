service: aws-workshop
frameworkVersion: '>=2.35.0'

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  timeout: 3
  logRetentionInDays: 14
  deploymentPrefix: aws-workshop-serverless
  stackTags:
    Description: AWS-Workshop

plugins:
  - workshopUsers

package:
  patterns:
    - src/**
    - '!config/**'
    - '!.npmignore'
    - '!.serverless_plugins'
    - '!README.md'

functions:
  checkTask:
    role: CheckTaskRole
    handler: src/checkTask.hadnler
    environment:
      SCORES_S3_NAME: !Ref ScoresBucket

resources:
  Conditions: # Do not create all resources for cost optimization
    NeedVpc: !Equals ["${file(./cost-conditions.yml):createVpc, 'true'}", true]
    NeedVpcTwoSubnets: !And
      - !Equals ["${file(./cost-conditions.yml):createVpc, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):twoSubnets, 'true'}", true]
    NeedPrivateSubnets: !And
      - !Equals ["${file(./cost-conditions.yml):createVpc, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):privateSubnets, 'true'}", true]
    NeedTwoPrivateSubnets: !And
      - !Equals ["${file(./cost-conditions.yml):createVpc, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):twoSubnets, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):privateSubnets, 'true'}", true]
    NeedEc2Template: !And
      - !Equals ["${file(./cost-conditions.yml):createVpc, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):ec2Template, 'true'}", true]
    NeedEc2Asg: !And
      - !Equals ["${file(./cost-conditions.yml):createVpc, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):ec2Template, 'true'}", true]
      - !Equals ["${file(./cost-conditions.yml):ec2Asg, 'true'}", true]

  Resources:
    # Student (Frontend) specific resources
    Ec2ConnectPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: WorkShopStudentUI
        Groups:
          - !Ref Colleagues
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - !GetAtt CheckTaskLambdaFunction.Arn
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource:
                - !GetAtt ScoresBucket.Arn
                - !Sub "arn:aws:s3:::${ScoresBucket}/*"

    Colleagues:
      Type: AWS::IAM::Group
      Properties:
        GroupName: "AwsWorkshopParticipants"
        Path: "/aws-workshop/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/ReadOnlyAccess

    Colleague:
      Type: AWS::IAM::User
      Metadata:
        "Serverless::Plugin::WorkshopUsers": "duplicate-with-user-and-password"
      Properties:
        Groups:
          - !Ref Colleagues
        LoginProfile:
          Password: "W1LL_be_OVERWRITTEN" # See workshopUsers.js
        Path: "/aws-workshop/"
        UserName: "example@example.com" # See workshopUsers.js

    # Deployment of the Frontend application
    AwsWorkshop:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    AwsWorkshopPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref AwsWorkshop
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AwsWorkshop
                  - '/*'
              Principal: '*'

    # Lambda specific resources
    CheckTaskRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: "/aws-workshop/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: Scores
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                      - "s3:PutObject"
                      - "s3:PutObjectAcl"
                      - "s3:GetObject"
                      - "s3:GetObjectAcl"
                  Resource:
                    - !GetAtt ScoresBucket.Arn
                    - !Sub "arn:aws:s3:::${ScoresBucket}/*"

    ScoresBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration: # Fro Browser API
          CorsRules:
            - AllowedHeaders:
                - "*"
              ExposedHeaders:
                - "x-amz-meta-last-modified"
              AllowedMethods:
                - "GET"
                - "PUT"
                - "POST"
              AllowedOrigins:
                - "*"
              MaxAge: "3000"

    #
    # Resources for the tasks
    #

    # Networking
    Vpc:
      Condition: NeedVpc
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        Tags:
          - Key: Name
            Value: VirtualNetwork

    InternetGateway:
      Condition: NeedVpc
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: Internet Gateway

    VpcToInternetGateway:
      Condition: NeedVpc
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: Vpc
        InternetGatewayId:
          Ref: InternetGateway

    # Public subnet 1 (with routes, NAT and IGW)
    PublicSubnet1:
      Condition: NeedVpc
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.0.0/18
        VpcId:
          Ref: Vpc
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: PublicSubnet 1

    PublicSubnet1RouteTable:
      Condition: NeedVpc
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PublicSubnet1 RouteTable

    PublicSubnet1RouteTableAssociation:
      Condition: NeedVpc
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: PublicSubnet1RouteTable
        SubnetId:
          Ref: PublicSubnet1

    PublicSubnet1DefaultRoute:
      Condition: NeedVpc
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicSubnet1RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
      DependsOn:
        - Vpc

    PublicSubnet1NatIp:
      Condition: NeedPrivateSubnets
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: NatGatewey1 IP

    NatGateway1:
      Condition: NeedPrivateSubnets
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - PublicSubnet1NatIp
            - AllocationId
        SubnetId:
          Ref: PublicSubnet1
        Tags:
          - Key: Name
            Value: Nat Gateway

    # Public subnet 1 (with routes, NAT and IGW)
    PublicSubnet2:
      Condition: NeedVpcTwoSubnets
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.64.0/18
        VpcId:
          Ref: Vpc
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: PublicSubnet2

    PublicSubnet2RouteTable:
      Condition: NeedVpcTwoSubnets
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PublicSubnet2 RouteTable

    PublicSubnet2RouteTableAssociation:
      Condition: NeedVpcTwoSubnets
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: PublicSubnet2RouteTable
        SubnetId:
          Ref: PublicSubnet2

    PublicSubnet2RouteTableDefaultRoute:
      Condition: NeedVpcTwoSubnets
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicSubnet2RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
      DependsOn:
        - Vpc

    PublicSubnet2NatIp:
      Condition: NeedTwoPrivateSubnets
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: NatGatewey2 IP

    NatGateway2:
      Condition: NeedTwoPrivateSubnets
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - PublicSubnet2NatIp
            - AllocationId
        SubnetId:
          Ref: PublicSubnet2
        Tags:
          - Key: Name
            Value: NatGateway

    # Private subnet 1 (with routes to NAT gateway)
    PrivateSubnet1:
      Condition: NeedPrivateSubnets
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.128.0/18
        VpcId:
          Ref: Vpc
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: PrivateSubnet1

    PrivateSubnet1RouteTable:
      Condition: NeedPrivateSubnets
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateSubnet1 RouteTable

    PrivateSubnet1RouteTableAssociation:
      Condition: NeedPrivateSubnets
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: PrivateSubnet1RouteTable
        SubnetId:
          Ref: PrivateSubnet1

    PrivateSubnet1DefaultRoute:
      Condition: NeedPrivateSubnets
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateSubnet1RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway1

    # Private subnet 2 (with routes to NAT gateway)
    PrivateSubnet2:
      Condition: NeedTwoPrivateSubnets
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.192.0/18
        VpcId:
          Ref: Vpc
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: PrivateSubnet2

    PrivateSubnet2RouteTable:
      Condition: NeedTwoPrivateSubnets
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateSubnet2 RouteTable

    PrivateSubnet2RouteTableAssociation:
      Condition: NeedTwoPrivateSubnets
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: PrivateSubnet2RouteTable
        SubnetId:
          Ref: PrivateSubnet2

    PrivateSubnet2DefaultRoute:
      Condition: NeedTwoPrivateSubnets
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateSubnet2RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway2

    # EC2 instance template (cheaper resources used to describe)
    InstanceSecurityGroup:
      Condition: NeedEc2Template
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Firewall for my instance"
        VpcId: !Ref Vpc

    InstanceRole:
      Condition: NeedEc2Template
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"

    InstanceProfile:
      Condition: NeedEc2Template
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref InstanceRole

    LaunchTemplateConfig:
      Condition: NeedEc2Template
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateData:
          ImageId: ami-00552336fb4b81164 # Amazon Linux 2 AMI  (64-bit Arm)
          SecurityGroupIds:
            - !Ref InstanceSecurityGroup
          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: StackName
                  Value: !Ref 'AWS::StackName'
                - Key: Name
                  Value: "spaceship-production"
            - ResourceType: volume
              Tags:
                - Key: StackName
                  Value: !Ref 'AWS::StackName'
          InstanceType: ${file(./cost-conditions.yml):instanceType}
          InstanceMarketOptions: ${file(./cost-conditions.yml):instanceMarketOptions}
          IamInstanceProfile:
            Name: !Ref InstanceProfile
          UserData:
            'Fn::Base64':
              'Fn::Sub': |
                #!/bin/bash
                yum update -y
                yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

    # Runnable instances
    AutoScalingGroup:
      Condition: NeedEc2Asg
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: My production instances
        MinSize: ${file(./cost-conditions.yml):asgMin}
        MaxSize: ${file(./cost-conditions.yml):asgMax}
        DesiredCapacity: ${file(./cost-conditions.yml):asgDesired}
        HealthCheckGracePeriod: 10 # Assuming instance status fast or checking Hardware, not software health
        LaunchTemplate:
          LaunchTemplateId: !Ref LaunchTemplateConfig
          Version: !GetAtt LaunchTemplateConfig.LatestVersionNumber
        VPCZoneIdentifier: ${file(./cost-conditions.yml):ec2Subments}

  Outputs:
    AccountId:
      Description: AWS Account number, where all tasks should be executed on
      Value: !Ref "AWS::AccountId"
    CheckTaskLambdaFunctionName:
      Description: Name to be used when invoking via SDK
      Value: !Ref CheckTaskLambdaFunction
    ScoresBucketName:
      Description: Name of the bucket, where shores will be stored (and read from by UI)
      Value: !Ref ScoresBucket
    AwsWorkshopBucketName:
      Description: Entry point bucket name (where all Frontend assets will be deployed)
      Value: !Ref AwsWorkshop
    AwsWorkshopSecureUrl:
      Value: !Sub "https://${AwsWorkshop.DomainName}/index.html"